name: Build and Test Executable

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Permissions minimales selon le principe de moindre privilège
permissions:
  contents: read          # Lecture du code source
  actions: read          # Lecture des actions et workflows
  # Pas de write permissions - ce workflow ne modifie pas le repository

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Verify required files exist
      shell: powershell
      run: |
        Write-Output "Checking required files..."
        $requiredFiles = @("config.ini", "traduction.json", "List-Uncheck.csv", "giveaway_ig.py", "Magic.ico", "file_version_info.txt")
        foreach ($file in $requiredFiles) {
          if (Test-Path $file) {
            Write-Output "✅ Found: $file"
          } else {
            Write-Output "❌ Missing: $file"
            exit 1
          }
        }
        Write-Output "All required files are present!"

    - name: Build Windows executable
      shell: powershell
      run: |
        Write-Output "Starting PyInstaller build..."
        $ErrorActionPreference = "Stop"

        try {
          pyinstaller --onefile --add-data "config.ini;." --add-data "traduction.json;." --add-data "List-Uncheck.csv;." --icon="Magic.ico" --version-file="file_version_info.txt" --name="Giveaway_IG" giveaway_ig.py

          Write-Output "Build completed successfully"
        } catch {
          Write-Output "❌ PyInstaller failed with error: $($_.Exception.Message)"
          Write-Output "Full error details:"
          Write-Output $_.Exception
          exit 1
        }

    - name: Verify executable was created
      shell: powershell
      run: |
        if (Test-Path "dist\Giveaway_IG.exe") {
          $fileSize = (Get-Item "dist\Giveaway_IG.exe").Length
          Write-Output "✅ Executable created successfully!"
          Write-Output "File size: $([math]::Round($fileSize / 1MB, 2)) MB"
        } else {
          Write-Output "❌ Executable not found at dist\Giveaway_IG.exe"
          exit 1
        }

    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: giveaway-ig-windows-exe
        path: dist/Giveaway_IG.exe
        retention-days: 30

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build Linux executable
      run: |
        echo "Building Linux executable..."
        pyinstaller --onefile --add-data "config.ini:." --add-data "traduction.json:." --add-data "List-Uncheck.csv:." --icon="Magic.ico" --name="Giveaway_IG" giveaway_ig.py

    - name: Verify executable was created
      run: |
        if [ -f "dist/Giveaway_IG" ]; then
          file_size=$(stat -c%s "dist/Giveaway_IG")
          echo "✅ Executable created successfully!"
          echo "File size: $(($file_size / 1024 / 1024)) MB"
          chmod +x dist/Giveaway_IG
        else
          echo "❌ Executable not found at dist/Giveaway_IG"
          exit 1
        fi

    - name: Upload Linux executable
      uses: actions/upload-artifact@v4
      with:
        name: giveaway-ig-linux-binary
        path: dist/Giveaway_IG
        retention-days: 30

  build-summary:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux]
    if: always()
    steps:
    - name: Build Summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.build-windows.result }}" == "success" ]; then
          echo "✅ Windows build: SUCCESS" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Windows build: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.build-linux.result }}" == "success" ]; then
          echo "✅ Linux build: SUCCESS" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Linux build: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Artifacts Generated:" >> $GITHUB_STEP_SUMMARY
        echo "- Windows: \`Giveaway_IG.exe\`" >> $GITHUB_STEP_SUMMARY
        echo "- Linux: \`Giveaway_IG\`" >> $GITHUB_STEP_SUMMARY
